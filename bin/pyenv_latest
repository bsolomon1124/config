#!/usr/bin/env bash

#
# Upgrade pyenv Python versions to latest PATCH version for each MINOR
# Uninstall stale versions
#
# Installs production releases only, no dev/rc/a/b.
#

if [[ ! -x "$(command -v pyenv)" ]]; then
    echo "pyenv not found; exiting" >&2
    exit 1
fi

pyenv local --unset
pyenv shell --unset
pyenv global system

echo -e "\e[34mUpgrading pyenv and available Python versions\e[39m"
pushd $(pyenv root)
git pull
popd

echo "Uninstalling outdated MINOR versions..."
STALE_VERSIONS=($(\
    pyenv install --list \
    | grep --extended-regexp '^\s+\d' \
    | grep -vE 'dev|rc|a|b' \
    | grep -vE '\s+2\.[1-6]' \
    | grep -vE '\s+3\.[0-4]' \
    | "$(dirname $(stat -f $0))"/_pyenv_stale.py\
))
for i in "${STALE_VERSIONS[@]}"; do
    (pyenv versions | grep -q --extended-regexp "${i}(?: |$)") && echo -e "\e[34mUNINSTALLING Python ${i}\e[39m"
    pyenv uninstall -f "$i"
done

echo "Installing latest PATCH version for each MINOR version..."
LATEST_VERSIONS=($(\
    pyenv install --list \
    | grep --extended-regexp '^\s+\d' \
    | grep -vE 'dev|rc|a|b' \
    | grep -vE '\s+2\.[1-6]' \
    | grep -vE '\s+3\.[0-4]' \
    | "$(dirname $(stat -f $0))"/_pyenv_latest.py\
))
for i in "${LATEST_VERSIONS[@]}"; do
    if (pyenv versions | grep -q --extended-regexp "${i}(?: |$)"); then
        echo -e "\e[36mSkipping install of Python ${i} (already installed)\e[39m"
    else
        echo -e "\e[36mINSTALLING Python ${i}\e[39m"
    fi
    pyenv install --skip-existing "$i"
done
